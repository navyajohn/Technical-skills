# -*- coding: utf-8 -*-
"""dsa-class (2).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Ag5iL_lvfFb2na0tLyMtn56jJwU7yEmK
"""

#import libraries for data analysis
import seaborn as sns

#display all example dataset from seaborn
sns.get_dataset_names()

len(sns.get_dataset_names()) #should be 22.

df=sns.load_dataset('titanic')
df.head()

df.tail()

df.sample(10)#to extract 10 random rows

df.shape#to get no. of rows and columns

print("no. of row are:",df.shape[0])
print("no. of columns are:",df.shape[1])

df.info()

df.describe()# gives statistical summary

"""# Observations:
* *The eldest passenger is 80yrs old.*
* *The highest fare was 512.*
* *Min. fare is 0 which is required to be checked.*

# Univariate analysis
# Q1- which gender had a greater presence among the passengers?
"""

df['sex'].value_counts()

sns.countplot(data=df,x='sex')

"""# Q- which passenger class had the fewest number of passengers?

"""

df['pclass'].value_counts()

sns.countplot(data=df,x='pclass');

"""# Q- how many passengers survived in each passenger class?

"""

sns.countplot(data=df,x='pclass',hue='survived');

"""# Q- explore the relationship btw fare and survival. Do passengers who paid higher fare have a better chance of survival?"""

sns.barplot(data=df,x='survived',y='fare',ci=False);

"""### Sample(statistic)-
* if total 892 people were there and we have data of 891 people the its a sample.
* Any numerical value associated with sample is stastic.
* sample ka mean= statistic
* Sampling Distribution- sample ke mean ka distribution krenge toh voh sampling distribution hoga

### Population(parameter)-
* if we have 891 people in total and we have data of 891 people then its a population.
* Any numerical value associated with population is parameter.
"""

#types of statistics-
#desriptive- describe the sample data.(central tendency- mean median mode)
#inferential- measure of dispersion

"""# Types of data
* quantitative
* qualitative

# son of a billionaire question
outliers distort the data. eg son of billionaire. so when outliers are present we measure central tendency by- 1) remove the outlier then take mean.2)calculate the median instead of mean to get central tendency.
"""

#boxplot used to identify the outlier
import seaborn as sns
import matplotlib.pyplot as plt
pck=[100,80,90,110,120,130,160,140,50,70,2000]
plt.figure(figsize=(10,3))
sns.boxplot(pck)

"""# Measures of dispersion
* range
* iqr(Interquartile range)
* variance
* standard deviation
* coefficient of variation = std dev/mean
"""

#range
import numpy as np
x=np.array([40,20,20,60,80,60,20,60])
range=max(x)-min(x)
range

#iqr(use quantile/percentile)
q1=np.quantile(x,0.25)
q3=np.quantile(x,0.75)
iqr=q3-q1
q1,q3,iqr

#variance
np.var(x)

#standard deviation
np.std(x)

#coefficient of variation(used to measure the consistency)
cv=np.std(x)/np.mean(x)
cv

r_avg=44
k_avg=50

r_std=20
k_std=26
r_cv=r_std/r_avg
k_cv=k_std/k_avg
print('r_cv',r_cv)
print('k_cv',k_cv)

"""# boxplot outliers upper limit and lower limit
* q1-1.5* iqr=lower limit
* q3+1.5* iqr= upper limit

# correlation
* pearson correlation coefficient (most common measure used)
"""

import pandas as pd
x1=np.arange(1,11)
x2=2*x1
x3=(-4*x2)**3
x4=np.array([1,4,3,22,43,45,67,54,33])
x5=np.array([23,24,35,46,56,78,54,69])
x6=np.array([23,24,35,46,56,78,54,69])
pd.DataFrame(np.transpose(x1,x2,x3,x4,x5,x6),index=('x1','x2','x3','x4',))

df.corr()#correlation calculate kra btw all pairs

sns.heatmap(df.corr(),annot=true)

sns.pairplot

"""# 06-august-  probability
3 unit select kro. defective(d) and non defective(g)
1) sample space(s)
2) atleast 2 defective
"""

s={[ggg][gdd][gdg][ddd][dgd][ddg][ggd][dgg]}

"""# Mutually exclusive events
when a event ho rha h then b event nhi ho skta. eg- deck of cards. if we pick king then we cannot get queen and vice versa.P(A intersection B)=0. eg- dice throw- getting even no.s. if we are geting even no.s then we wont be getting odd numbers.

**if its not known if a and b are mutually exclusive then consider that its not unless you can prove it.**

# Independent event
occurenece of a is in no way influenced by the occurence of b.
example- 2 dices. get even on first dice and getting odd on second dice doiesnt affect each other.
**if its not known wheter a and b are independent or not, we will assume that they are not independent**

mutually exclusive yes no independent yes no(box)(make exampoles for each example)

# Marginal probability
probability of an event occuring regardless of the outcome of another event.
"""

import seaborn as sns
df=sns.load_dataset('titanic')
df.head()

import numpy as np
import pandas as pd
pd.crosstab(df['pclass'],df['survived'],margins=True)

#df.pivot_table(values='pclass',columns='survived',aggfunc='count')

#passenger survived given their class
print('1st class', 136/891*100)
print('2st class',87/891*100)
print('3st class' ,372/891*100)

#passenger was travelling in 3rd class and didnt survive
372/491

"""# Bayes theorem
p(a|b)=p(b|a).p(a)/p(b)
# conditional probability-
a(a|b)=p(a intersection b)/p(b)
posterior prob p(spam|detected)=p(detected|spam)* p(spam)/p(detected|spam)* p(spam) +p(detected|not spam)* p(not spam)
# generatized theorem-
p(bi|a)=p(a|b).p(b)/p(a|b1).p(b1)+p(a|b2).p(b2)+-------+p(a|bk).p(bk)

### Inferential statistics
* making inferences about population using samples.
* bell curve used here for **probability distribution**

### Random variable-
a random variable assigns a value to the outcomes of the probability
### range of values

### discrete random variable-
koi particular value leta h in random vriable then its discrete(when values taken by random variable can be listed. eg- 1 2 3 4 5)
### continuous random variable-
koi bhi value le li for random variable then its continuous(values that cannot be listed eg-1.2222478292.... can take any value in a given range)

### Binomial distribution-
success or failure, fixed no of observations

### Business Context

A leading pharmaceutical company has tested five batches of a vaccine. With 300,000 doses already administered, the sixth batch of 60,000 doses needs quality assurance testing for effectiveness and curing time.
* Previous data shows each dose is twice as likely to be satisfactory as unsatisfactory. This test is to ensure the sixth batch's quality, not a clinical trial.

#### Objective
Analyze random samples from the sixth batch to infer its quality and curing time. Your tasks include:

##### Task 1: Analyze 10 randomly selected doses to determine:

* Probability distribution of unsatisfactory doses
* Probability that exactly 3 out of 10 doses are unsatisfactory
* Probability that at most 3 out of 10 doses are unsatisfactory
* Probability that more than 8 out of 10 doses are satisfactory
##### Task 2: For 20 doses requested by the New York City administration:

* Probability that at least 11 out of 20 doses are unsatisfactory
* Probability that at most 5 out of 20 doses are unsatisfactory
* Probability that at least 13 out of 20 doses are satisfactory
##### Task 3: Analyze the time of effect for 50 doses given to volunteers.
* Probability that the time of effect is less than 11.5 hours
* Probability that the time of effect is more than 10 hours
* Calculate the 90th percentile of the time of effect
* Use dataset doses.csv. The features in the dataset are:
    * drug_serial_number: Unique serial number of a dose
    * time_of_effect: Time taken for the dose to completely cure COVID (in hours):

*Note: A satisfactory dose means it completely cures COVID-19 without side effects.*

success in this case is unsatisfactory
p=
n=
x=
"""



import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import scipy.stats as stats
from scipy.stats import binom

p=0.33
#no. of trials
n=10
# k=all the varialbes the randome variable ius taking
k=np.arange(0,11)
#Probability distribution of unsatisfactory doses
#pmf probability mass function- gives the probability that a discrete variable is exactly equal to some value
binomial_prob=binom.pmf(k=k,n=n,p=p)
binomial_prob

# plot the probabitlity distribution
plt.figure(figsize=(10,5))
plt.bar(k,binomial_prob)
plt.title('Binomial distribution for 10 doses')
plt.xlabel('Number of unsatisfactory doses')
plt.ylabel('Probability');

#exactly 3 doese unsatisfactory
plt.figure(figsize=(10,5))
barl=plt.bar(k,binomial_prob)
plt.title('Binomial distribution for 10 doses')
plt.xlabel('Number of unsatisfactory doses')
plt.ylabel('Probability');
barl[3].set_color('r')

#prob of exactly 3 doeses being unsatisfactory
round(binom.pmf(k=3,n=n,p=p),5)

#atmost 3 doses out of 10 are unsatisfactory OR
sum(binomial_prob[:4])

#atmost 3 doses out of 10 are unsatisfactory
#sum(binomial_prob[:4])
prob_atmost3=binom.cdf(k=3,n=n,p=p)
prob_atmost3

#plot
import numpy as np
plt.figure(figsize=(10,5))
barl=plt.bar(k,binomial_prob)
plt.title('Binomial distribution for 10 doses')
plt.xlabel('Number of unsatisfactory doses')
plt.ylabel('Probability');
for i in range(0,4):
    barl[i].set_color('r')

#Probability that more than 8 out of 10 doses are satisfactory
p_satisfactory=1-.33
n=10
k=np.arange(0,11)
bi_prob_satis=binom.pmf(k=k,n=n,p=p_satisfactory)
bi_prob_satis



prob_atmost1=binom.cdf(k=8,n=n,p=1-p)
1-prob_atmost1

#OR

prob_atmost1=binom.cdf(k=1,n=n,p=p)
prob_atmost1

#plot
import numpy as np
plt.figure(figsize=(10,5))
barl=plt.bar(k,binomial_prob)
plt.title('Binomial distribution for 10 doses')
plt.xlabel('Number of unsatisfactory doses')
plt.ylabel('Probability');
for i in range(8,10):
    barl[i].set_color('r')

import pandas as pd
df=pd.read_csv('doses.csv')
df.head()

df.info()

#probability that the time of effect is less than 11.5 hours
len(df[df['time_of_effect']  <11.5])/len(df)*100

import seaborn as sns
import matplotlib.pyplot as plt
plt.figure(figsize=(10,4))
sns.boxplot(df['time_of_effect'],orient='h')

"""### Normal distribution

*  continuous distributuion: nd is continuous

*  when to use? whaen data is symmetrically distributed

*  making inferences using sample

*  68%, 95%,99.7%
* total area under curve is always 1

"""

df['time_of_effect'].mean(), df['time_of_effect'].median()



#example -
import scipy.stats as stats
mean=175
sd=10
x=185
1-stats.norm.cdf(x,mean,sd)#normal distrib ution formula applied here

#cdf always works for less than so agr greater thn ki value chahiy toh 1 se minus kro
import numpy as np
np.std(df['time_of_effect'])

# less than 11.5 hrs
stats.norm.cdf(11.5,df['time_of_effect'].mean(),df['time_of_effect'].std())

# more than 10hrs

"""### uniform distribution
* probability of occurences is uniform distribution
* its a probability distribution in which all outcome are equally likely.
* two types: discrete and continuous
* discrete: outcomes are discrete and finite.
* continuous: outcomes are continuous and can take any value between a specified range.
* parameters: a and b which is minimum and maximum values of distribution
* when to use? all outcomes are in specified range and all are equally likely , no bias,
* discrete: 1/b-a+1
* continuous:pdf=1/b-a cdf=x-a/b-a
"""

import scipy.stats as stats

# range is 20 to 50 then find prob of no. generated greater than 35(greater than h so 1- krna hoga)
1-stats.uniform.cdf(35,loc=20,scale=30)
# 50-20=30 likhenge instead of 50(scale=30) loc= min value, scale= total value btw min and max

"""# question
* x number of books sold per day
* find pronb that more than or equal to 96 books will be sold on a give day
* find pronb that less than or equal to 92 books will be sold on a give day

"""

import pandas as pd
book=pd.read_csv('bookseller.csv')
book.head()

book.shape

book.max()

book.min()

book.describe()

import matplotlib.pyplot as plt

plt.hist(book["Number of Books Sold"],11, rwidth=0.9,density=True)
plt.axhline(1/11, color="red")
plt.xlabel("Number of Books Sold")
plt.ylabel("Density")
plt.show()



stats.uniform.cdf(93,loc=90,scale=11)

"""# question : Continuous uniform example
#a randomly selected software debugging requires less than 3 hours
#a randomly selected software debugging requires more than 2 hours
#
"""

bug= pd.read_csv("debugging.csv")
bug.head()

plt.hist(bug["Time Taken to fix the bug"],density=True)
plt.axhline(1/4, color="red")
plt.xlabel("Time Taken to fix the bug")
plt.ylabel("Probability")
plt.show()

import seaborn as sns
sns.displot(bug["Time Taken to fix the bug"], kde=True,height=3,aspect=2)
plt.show()

bug.describe()

#less than 3 hours
import numpy as np
from scipy.stats import uniform
x=np.linspace(1,5,50)
probs=stats.uniform.pdf(x,1,4)
probs

stats.uniform.cdf(3,1,4)

# more than 2 hours
1- stats.uniform.cdf(2,1,4)

# percentile 50 (1-0.75=0.25)
uniform.ppf(q=0.25, loc=1, scale=4)

from scipy.stats import poisson
l=3
k=5
poisson.pmf(5,3)

poisson.pmf(7,5)
#jb exactlyt find krna hota h then use pmf

# rvs helps simulate ver a longer period of time
poisson.rvs(5,size=1000)

#avg=15, per month mean?
rate=15/12
rate

# prob of no accidents
poisson.cdf(0,rate)

# for 1 accident
poisson.pmf(1,rate)

# more than 1 accident
1-poisson.cdf(1,rate)

"""### Sampling Distribution-
* sample ke mean ka distribution krenge toh voh sampling distribution hoga
### Sample(statistic)-
* if total 892 people were there and we have data of 891 people the its a sample.
* Any numerical value associated with sample is stastic.
* sample ka mean= statistic
* Sampling Distribution- sample ke mean ka distribution krenge toh voh sampling distribution hoga
### Population(parameter)-
* if we have 891 people in total and we have data of 891 people then its a population.
* Any numerical value associated with population is parameter.
* sample ke mean ka mean will be = to population ka mean
* i.e. mean(sample(mean))= population(mean)

### Central Limit Theorem
the sampling distribution of sample means will approach normal distribution as the sample size gets bigger, no matter what the shape of the population distribution is.( population distribution graph ka koi bhi shape ho uske sample mean ka graph will be like normal distribution in shape)

### Estimation
make inference about a population parameter using sample statistics
* 2 types-
* point estimation- single point estimation of the pop. parameter
* interval estimation- range of values within which the pop parameter lies with x% confidence
"""

import pandas as pd
df=pd.read_csv('talent_hunt_scores.csv')
df.head(

)

"""### Hypothesis testing
* hypothesis is a conjuncture about the population parameter
### Null hypothesis
* generally kya hoyta h voh sahi h
* eg-generally sbko cancer nhi h, generally sb criminal nhi h
* isme kbhi bhi = nhi ayega
### Alternative hypothesis
* research krke prove kro ki sahi h ya nhi
* eg-criminal h uska evidence se prove kro
* mostly alternate hypo mai jo ques mai claim ho rha h voh ayega. jo general se hat ke h voh ayega

### Type 1 error
* rejecting h0 while it is true
### Type 2 error
* accepting h0 while it is false

# Alternative Hypothesis
### one tailed test
when we use <,> signs in alt hypo
### two tailed test
when we use not= to sign in alt hypo

meu sample ka mean
meu0 population ka mean
"""

import pandas as pd
df=pd.read_csv('talent_hunt_scores.csv')

